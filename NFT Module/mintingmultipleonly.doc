/// This module is an example of how one can create a NFT collection from a resource account
/// and allow users to mint from the NFT collection.
/// Check aptos-move/move-e2e-tests/src/tests/mint_nft.rs for an e2e example.
///
/// - Initialization of this module
/// Let's say we have an original account at address `0xcafe`. We can use it to call the smart contract function
/// `create_resource_account_and_publish_package(origin, vector::empty<>(), ...)` - this will create a resource address at
/// `0xc3bb8488ab1a5815a9d543d7e41b0e0df46a7396f89b22821f07a4362f75ddc5`. The module `mint_nft` will be published under the
/// resource account's address.
///
/// - Accounts of this module
/// > source account: the account used to create the resource account.
/// > resource account: resource account is the account in charge of creating the collection and minting the tokens. A resource account is
/// meant to programmatically sign for transactions so nobody has the private key of the resource account. The signer capability of
/// the resource account is store in `ModuleData` to programmatically create a NFT collection and mint tokens.
/// > admin account: admin account is the account in charge of updating the config of this contract. The admin account can update the
/// expiration time, minting_enabled flag, and the public key of the admin account.
///
/// - When using this module, we expect the flow to look like:
/// 1. call create_resource_account_and_publish_package() (in a script or cli) to publish this module under the resource account's address.
/// init_module() will be called automatically as part of publishing the package. In init_module(), we set up the NFT collection to mint.
/// 2. call mint_nft() from a nft receiver's account: this will check if this token minting is still valid, verify the `MintProofChallenge` struct
/// against the admin's public key, and mint a token to the `receiver` upon successful verification. We will also emit an event
/// and mutate the token property (update the token version) upon successful token transfer.
/// 3. (optional) the admin account can update `expiration_timestamp`, `minting_enabled`, and `public_key` when needed.
///
/// - How to run this on cli
/// 1. Create three accounts: source-account (default), admin-account, and nft-receiver account
/// aptos init (create source account)
/// aptos init --profile admin-account (create admin-account)
/// aptos init --profile nft-receiver (create nft-receiver account)
/// 2. Fund all accounts
/// aptos account fund-with-faucet --account default (repeat multiple times for the source account, because publishing a module costs more gas)
/// aptos account fund-with-faucet --account admin-account
/// aptos account fund-with-faucet --account nft-receiver
/// 3. Run create_resource_account_and_publish_package to publish this contract under the resource account's address
/// (need to change the named address in Move.toml file to the actual values first. also, the seed here is just an example)
/// cargo run -p aptos -- move create-resource-account-and-publish-package --seed hex_array:4321 --address-name mint_nft --profile default
/// 4. Update the admin's public key from the admin's account
/// aptos move run --function-id [resource account's address]::minting::set_public_key --profile admin-account --args hex:[admin account's public key]
/// for example: aptos move run --function-id 9a0e3291258d2a3d7698fe850509d37bc8ae29d83b9f9796dea188fe9a7b5cd3::minting::set_public_key --profile admin-account --args hex:E563FA6BC769ACD4EA99F7206156F1EACE2129DB56AEEC00D8E5DE992ADC1495
/// 5. Update the timestamp of the colleciton from the admin's account
/// aptos move run --function-id [resource account's address]::minting::set_timestamp --args u64:1000000000000000 --profile admin-account
/// 6. Call `mint_nft` from the nft-receiver's account
/// 6.1 Generate a valid signature.
///     Go to aptos-core/aptos/move-e2e-tests/src/tests/mint_nft.rs
///     In function `sample_tutorial_signature`, change the `resource_address`, `nft_receiver`, `admin_private_key` to the actual values.
///     run `cargo test sample_tutorial_signature -- --nocapture` to generate a valid signature that we'll use in the next step.
/// 6.2 Run `mint_nft` from the nft-receiver's account
///     aptos move run --function-id 79fe4e3fcf480db43c5c50ddcbe36b3ff8691b0b6420fd060036c3fe189f5361::minting::mint_nft --args hex:[valid signature] --profile nft-receiver
///     for example: aptos move run --function-id 9a0e3291258d2a3d7698fe850509d37bc8ae29d83b9f9796dea188fe9a7b5cd3::minting::mint_nft --args hex:cf32699cf84a5390e021b8e775ff7627ee8c7a0c049bd3d774ea7880632a5638a200852f167ccb12590436bedd5b0d86187871f4836e3a0c47c55e8f5709440c --profile nft-receiver
/// 7. (Optional) Go to devnet explorer and check out the resources of these accounts
module mint_nft::minting {
    use std::error;
    use std::signer;
    use std::string::{Self, String};
    //use std::option::{Self, Option};
    use std::vector;

    use aptos_framework::aptos_account;
    use aptos_framework::account;
    use aptos_framework::event::{Self, EventHandle};
    use aptos_framework::timestamp;
    use aptos_std::ed25519;
    use aptos_token::token::{Self, TokenDataId, TokenId};//, TokenDataId, Token  
    use aptos_framework::resource_account;



    // This struct stores the token receiver's address and token_data_id in the event of token minting
    struct TokenMintingEvent has drop, store {
        token_receiver_address: address,
        token_data_id: TokenDataId,
        token_id: TokenId,
    }

    // This struct stores an NFT collection's relevant information
    struct ModuleData has key {
        public_key: ed25519::ValidatedPublicKey,
        signer_cap: account::SignerCapability,
      //  token_data_id: TokenDataId,
        expiration_timestamp: u64,
        minting_enabled: bool,
        token_minting_events: EventHandle<TokenMintingEvent>,
        mint_fee: u64,
        fee_receiver_address: address,
        admin_account_address: address,
        maximum_supply: u64,
        collection_name: String,
        description: String,
        collection_uri: String,
        token_name: String,
        token_base_uri: String,
        supply_counter: u64,
        creator_address: address,
         

    }

    // // This struct stores the challenge message that proves that the resource signer wants to mint this token
    // // to the receiver. This struct will need to be signed by the resource signer to pass the verification.
    // struct MintProofChallenge has drop {
    //     receiver_account_sequence_number: u64,
    //     receiver_account_address: address,
    //     token_data_id: TokenDataId,
    // }

    /// Action not authorized because the signer is not the admin of this module
    const ENOT_AUTHORIZED: u64 = 1;
    /// The collection minting is expired
    const ECOLLECTION_EXPIRED: u64 = 2;
    /// The collection minting is disabled
    const EMINTING_DISABLED: u64 = 3;
    /// Specified public key is not the same as the admin's public key
    const EWRONG_PUBLIC_KEY: u64 = 4;
    /// Specified scheme required to proceed with the smart contract operation - can only be ED25519_SCHEME(0) OR MULTI_ED25519_SCHEME(1)
    const EINVALID_SCHEME: u64 = 5;
    /// Specified proof of knowledge required to prove ownership of a public key is invalid
    const EINVALID_PROOF_OF_KNOWLEDGE: u64 = 6;
        /// Max Supply reached
    const MAX_SUPPLY_REACHED: u64 = 7;

    

    /// Initialize this module: create a resource account, a collection, and a token data id
    fun init_module(resource_account: &signer) {
        // NOTE: This is just an example PK; please replace this with your desired admin PK.
        let hardcoded_pk = x"83f5e31d9d6c42ee2f03b3861cd55fc0088b8901ad729ea9bf952d0af32d90cc";
        init_module_with_admin_public_key(resource_account, hardcoded_pk);
    }

    fun init_module_with_admin_public_key(resource_account: &signer, pk_bytes: vector<u8>) {
        let collection_name = string::utf8(b"BMD NFT");
        let description = string::utf8(b"Description");
        let collection_uri = string::utf8(b"www.collection.com");
        let token_name = string::utf8(b"Aptos");
        let token_base_uri = string::utf8(b"www.bmd.com/");
        let expiration_timestamp = 1671599635;
        //add mint fee here in octas
        let mint_fee = 1000;
        // add fee receiver address here
        let fee_receiver_address = @fee_receiver_addr;
        //admin account
        let admin_account_address = @admin_addr;
        //supply counter
        let supply_counter = 0;
       
        // change source_addr to the actual account that created the resource account
        let resource_signer_cap = resource_account::retrieve_resource_account_cap(resource_account, @source_addr);
        let resource_signer = account::create_signer_with_capability(&resource_signer_cap);

        // create the nft collection
        let maximum_supply = 10;
        let mutate_setting = vector<bool>[ false, false, false ];
        // creator address
        let creator_address = signer::address_of(resource_account);


       // let resource_account_address = signer::address_of(&resource_signer);
        token::create_collection(&resource_signer, collection_name, description, collection_uri, maximum_supply, mutate_setting);

        // // create a token data id to specify which token will be minted
        // let token_data_id = token::create_tokendata(
        //     &resource_signer,
        //     collection_name,
        //     token_name,
        //     string::utf8(b""),
        //     0,
        //     token_uri,
        //     resource_account_address,
        //     1,
        //     0,
        //     // we don't allow any mutation to the token
        //     token::create_token_mutability_config(
        //         &vector<bool>[ false, false, false, false, true ]
        //     ),
        //     vector::empty<String>(),
        //     vector::empty<vector<u8>>(),
        //     vector::empty<String>(),
        // );

        let public_key = std::option::extract(&mut ed25519::new_validated_public_key_from_bytes(pk_bytes));

        move_to(resource_account, ModuleData {
            public_key,
            signer_cap: resource_signer_cap,
            expiration_timestamp,
            minting_enabled: true,
            token_minting_events: account::new_event_handle<TokenMintingEvent>(&resource_signer),
            mint_fee,
            fee_receiver_address,
            admin_account_address,
            maximum_supply,
            collection_name,
            description,
            collection_uri,
            token_name,
            token_base_uri,
            supply_counter,
            creator_address,

        });
    }

    /// Set if minting is enabled for this minting contract
    public entry fun set_minting_enabled(caller: &signer, minting_enabled: bool) acquires ModuleData {
        let caller_address = signer::address_of(caller);
        assert!(caller_address == @admin_addr, error::permission_denied(ENOT_AUTHORIZED));
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        module_data.minting_enabled = minting_enabled;
    }

    /// Set the expiration timestamp of this minting contract
    public entry fun set_timestamp(caller: &signer, expiration_timestamp: u64) acquires ModuleData {
        let caller_address = signer::address_of(caller);
        assert!(caller_address == @admin_addr, error::permission_denied(ENOT_AUTHORIZED));
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        module_data.expiration_timestamp = expiration_timestamp;
    }

    /// Set the public key of this minting contract
    public entry fun set_public_key(caller: &signer, pk_bytes: vector<u8>) acquires ModuleData {
        let caller_address = signer::address_of(caller);
        assert!(caller_address == @admin_addr, error::permission_denied(ENOT_AUTHORIZED));
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        module_data.public_key = std::option::extract(&mut ed25519::new_validated_public_key_from_bytes(pk_bytes));
    }

        /// Set the fee receiver address of this minting contract
    public entry fun set_fee_collector(caller: &signer, fee_collector: address) acquires ModuleData {
        let caller_address = signer::address_of(caller);
        assert!(caller_address == @admin_addr, error::permission_denied(ENOT_AUTHORIZED));
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        module_data.fee_receiver_address = fee_collector;
    }

            /// Set the mintfee of this minting contract
    public entry fun change_set_fee(caller: &signer, fee: u64) acquires ModuleData {
        let caller_address = signer::address_of(caller);
        assert!(caller_address == @admin_addr, error::permission_denied(ENOT_AUTHORIZED));
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        module_data.mint_fee = fee;
    }




    /// Mint an NFT to the receiver.
    /// `mint_proof_signature` should be the `MintProofChallenge` signed by the admin's private key
    /// `public_key_bytes` should be the public key of the admin
    public entry fun mint_nft(receiver: &signer, amount: u64, name : String) acquires ModuleData {
        let receiver_addr = signer::address_of(receiver);

        // get the collection minter and check if the collection minting is disabled or expired
        let module_data = borrow_global_mut<ModuleData>(@mint_nft);
        assert!(timestamp::now_seconds() < module_data.expiration_timestamp, error::permission_denied(ECOLLECTION_EXPIRED));
        assert!(module_data.minting_enabled, error::permission_denied(EMINTING_DISABLED));

        //Take mint fee from nft minter
        let total_fee = (amount* module_data.mint_fee);
        aptos_account::transfer(receiver, module_data.fee_receiver_address, total_fee);
    
    
                // mint token to the receiver
      let resource_signer = account::create_signer_with_capability(&module_data.signer_cap);
            let i = 0;
        loop {
        i = i + 1;
        if (i > amount) break;
       let token_data_id = token::create_tokendata(
            &resource_signer,
            module_data.collection_name,
            name,
            string::utf8(b""),
            1,
            module_data.token_base_uri,
            receiver_addr,
            1,
            0,
            // we don't allow any mutation to the token
            token::create_token_mutability_config(
                &vector<bool>[ false, false, false, false, true ]
            ),
            vector::empty<String>(),
            vector::empty<vector<u8>>(),
            vector::empty<String>(),
        );
        let token_id = token::mint_token(&resource_signer, token_data_id, 1);
        token::direct_transfer(&resource_signer, receiver, token_id, 1);
        
        event::emit_event<TokenMintingEvent>(
            &mut module_data.token_minting_events,
            TokenMintingEvent {
                token_receiver_address: receiver_addr,
                token_data_id: token_data_id,
                token_id,
            }
        );

        // mutate the token properties to update the property version of this token
       //let (creator_address, collection, name) = token::get_token_data_id_fields(token_data_id);
        token::mutate_token_properties(
            &resource_signer,
            receiver_addr,
            module_data.creator_address,
            module_data.collection_name,
            name,
            0,
            1,
            vector::empty<String>(),
            vector::empty<vector<u8>>(),
            vector::empty<String>(),
        );
   


        };
    }



        /// Burn a token by the token owner
    public entry fun burnOwnToken(
        owner: &signer,
        creators_address: address,
        collection: String,
        name: String,
        property_version: u64,
        
    ) {

        token::burn(owner, creators_address, collection, name, property_version, 1) 
    }


        // Transfers token from `from` to `to`.
    public fun transferToken(
        from: &signer,
        id: TokenId,
        to: address,
    ) {
   
      token::transfer(from, id, to, 1);

    }

    //user need to be opt in to recieve token through direct transfer
    public fun enable_opt_in_direct_transfer(account: &signer, opt_in: bool) {
       token::opt_in_direct_transfer(account, opt_in) ;
    }




}